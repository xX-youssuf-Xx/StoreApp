apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: 'com.google.gms.google-services'

react {
    /* All your existing react configuration */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = true  // Changed to true

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.omar.store"
    defaultConfig {
        applicationId "com.omar.store"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        missingDimensionStrategy 'react-native-camera', 'general'
        
        // Add these lines
        multiDexEnabled true
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file(ELBARAKA_RELEASE_STORE_FILE)
            storePassword ELBARAKA_RELEASE_STORE_PASSWORD
            keyAlias ELBARAKA_RELEASE_KEY_ALIAS
            keyPassword ELBARAKA_RELEASE_KEY_PASSWORD
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true  // Changed to true
            shrinkResources true  // Added
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
            debuggable true  // For debugging release builds
        }
    }

    // Add this block to handle lint options
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    // Add this block
    packagingOptions {
        pickFirst '**/*.so'
        pickFirst '**/armeabi-v7a/*.so'
        pickFirst '**/arm64-v8a/*.so'
        pickFirst '**/x86/*.so'
        pickFirst '**/x86_64/*.so'
    }
}

dependencies {
    implementation("com.facebook.react:react-android")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    // Add these dependencies
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
}

android.applicationVariants.all { variant ->
    tasks.whenTaskAdded { task ->
        if (task.name.contains('lintAnalyze')) {
            def copyIconsTask = tasks.findByName('copyReactNativeVectorIconFonts')
            if (copyIconsTask != null) {
                task.dependsOn(copyIconsTask)
            }
        }
    }
}

apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"